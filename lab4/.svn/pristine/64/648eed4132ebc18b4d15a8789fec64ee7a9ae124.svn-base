#include <lcom/lcf.h>
#include <minix/drivers.h>
#include <minix/syslib.h>
#include <minix/sysutil.h>
#include <stdbool.h>
#include <stdint.h>
#include "i8254.h"
#include "i8042.h"
#include "kbc.h"
#include <lcom/lab4.h>
#include "mousedriver.h"

static int hook_id = 12; // hookid utilizado para a funçao irq_setpolicy()
uint8_t mousepacket;

int(mouse_subscribe_int)(uint8_t *bit_no) {

  if (bit_no == NULL) { //erro caso a apontador bit no não seja valido
    return -1;
  }

  *bit_no = hook_id; // bit no recebe o hook id que nos configuramos para mandarmos para o kernel

  if (sys_irqsetpolicy(IRQ_LINE_MOUSE, IRQ_REENABLE | IRQ_EXCLUSIVE, &hook_id) != OK) { //da set a policy
    return -1;
  }

  return 0;
  //check
}

int(mouse_unsubscribe_int)() {

  if (sys_irqdisable(&hook_id) != OK) { //disable primeiro, para depois tirar a policy set
    return -1;
  }
  if (sys_irqrmpolicy(&hook_id) != OK) { //disbable nos interrupts
    return -1;
  }
  return 0;
  //check
}

void (mouse_ih)(){

  uint32_t statusregister = INITIALIZE0;
  uint32_t mousepacket32bit = INITIALIZE0, mousepacket8bit = INITIALIZE0;
  int i;
  if (sys_inb_cnt(STAT_REG, &statusregister) != 0) { //ler valor so stat reg, para saber o estado das entradas se estão cheias ou não
    return; /* assuming it returns OK */
  }
  /* loop while 8042 output buffer is empty */
  for(i=0;i<5;i++){
    if (statusregister & OBF) { // se estiver cheio o outbuff lemos

      if (sys_inb_cnt(OUT_BUF, &mousepacket32bit) != 0) {
       /* assuming it returns OK */
        return;
      }

      mousepacket8bit = (uint8_t)(mousepacket32bit & CAST_PARA_8BITS);

      if ((statusregister & (AUX)) != 0) { //caso não acontecer algum erro
        mousepacket = mousepacket8bit;
        return;
      }
      else {   // caso acontecer algum erro
        return;
      }
    }
  //tickdelay

}
  return;
}
