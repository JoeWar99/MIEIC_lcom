// IMPORTANT: you must include the following line in all your C files
#include <lcom/lcf.h>
#include <lcom/lab4.h>
#include <stdint.h>
#include <stdio.h>
#include <stdint.h>
#include <minix/drivers.h>
#include <minix/syslib.h>
#include <minix/sysutil.h>
#include <stdbool.h>
#include "mousedriver.h"
#include "i8042.h"
#include "kbc.h"
#include "i8254.h"


// Any header files included below this line should have been created by you
extern uint8_t mousebyte;

int main(int argc, char *argv[])
{
  // sets the language of LCF messages (can be either EN-US or PT-PT)
  lcf_set_language("EN-US");

  // enables to log function invocations that are being "wrapped" by LCF
  // [comment this out if you don't want/need/ it]
  lcf_trace_calls("/home/lcom/labs/lab4/trace.txt");

  // enables to save the output of printf function calls on a file
  // [comment this out if you don't want/need it]
  lcf_log_output("/home/lcom/labs/lab4/output.txt");

  // handles control over to LCF
  // [LCF handles command line arguments and invokes the right function]
  if (lcf_start(argc, argv))
    return 1;

  // LCF clean up tasks
  // [must be the last statement before return]
  lcf_cleanup();

  return 0;
}

int(mouse_test_packet)(uint32_t cnt)
{
  int ipc_status, r, irq_set, contadorbytes = 0, sinalx, sinaly;
  message msg;
  uint8_t bit_no;
  struct packet leitura;
  uint8_t arg_report = INITIALIZE0;
  uint16_t mousebyte16bits;
  uint32_t lixo;
  uint32_t comand_byte32bits;
 

  sys_outb(0x64,0x20);
  sys_inb(0x60, &comand_byte32bits);

  comand_byte32bits = comand_byte32bits & 0xfd;

  sys_outb(0x64, 0x60);
  sys_outb(0x60, comand_byte32bits);

  if((mouse_write(WRITE_BYTE_TO_MOUSE))!=0){
    return -1;
  }


  if((mouse_messaging(&arg_report, ENABLE_DATA_REPORTING))!=0)
    return -1;
  
  comand_byte32bits = comand_byte32bits | 0x02; 
  sys_outb(0x64, 0x60);
  sys_outb(0x60, comand_byte32bits);

  if (mouse_subscribe_int(&bit_no) != 0)
  return 1;

  irq_set = BIT(bit_no);


  sys_outb(0x64,0x20);
  sys_inb(0x60, &comand_byte32bits);


  while (cnt > 0)
  { //condiÃ§ao para sair do ciclo do interrupts, caso se detete o scancode do esc
    if ((r = driver_receive(ANY, &msg, &ipc_status)) != 0)
    {
      printf("driver_receive failed with: %d", r);
      continue;
    }
    if (is_ipc_notify(ipc_status))
    {
      switch (_ENDPOINT_P(msg.m_source))
      {
      case HARDWARE:

        if (msg.m_notify.interrupts & irq_set)
        {
          mouse_ih();

          //testar a sincronizacao
          if (contadorbytes == 0)
          {
            if ((mousebyte & BIT(3)) != 0)
            {
              leitura.bytes[0] = mousebyte;
            }
            else
              continue;
          }

          else if (contadorbytes == 1)
          {

            leitura.bytes[1] = mousebyte;

          }

          else if (contadorbytes == 2)
          {
            leitura.bytes[2] = mousebyte;

            if ((leitura.bytes[0] & L_B) != 0)
              leitura.lb = TRUE;
            else
              leitura.lb = FALSE;

            if ((leitura.bytes[0] & M_B) != 0)
              leitura.mb = TRUE;
            else
              leitura.mb = FALSE;

            if ((leitura.bytes[0] & R_B) != 0)
              leitura.rb = TRUE;
            else
              leitura.rb = FALSE;

            if ((leitura.bytes[0] & Y_OVFL) != 0)
              leitura.y_ov = TRUE;
            else
              leitura.y_ov = FALSE;

            if ((leitura.bytes[0] & X_OVFL) != 0)
              leitura.x_ov = TRUE;
            else
              leitura.x_ov = FALSE;

            if ((leitura.bytes[0] & X_SIGN) != 0)
            {
              sinalx = 1;
            }
            else
              sinalx = 0;

            if ((leitura.bytes[0] & Y_SIGN) != 0)
            {
              sinaly = 1;
            }
            else
              sinaly = 0;


              if (sinalx == 1)
              {
                mousebyte16bits = 0;
                mousebyte16bits = (mousebyte16bits|leitura.bytes[1]);
                mousebyte16bits = (mousebyte16bits ^ 0xff) + 0x01;
                leitura.delta_x = mousebyte16bits;
              }
              else
              {
                mousebyte16bits = 0;
                mousebyte16bits = (mousebyte16bits|leitura.bytes[1]);

                leitura.delta_x = mousebyte16bits;
              }

            if (sinaly == 1)
            {
              mousebyte16bits = 0;
              mousebyte16bits = (mousebyte16bits|leitura.bytes[2]);
              mousebyte16bits = (mousebyte16bits ^ 0xff) + 0x01;
              leitura.delta_y = mousebyte16bits;
            }
            else
            {
              mousebyte16bits = 0;
              mousebyte16bits = (mousebyte16bits|leitura.bytes[2]);
              leitura.delta_y = mousebyte16bits;
            }




            contadorbytes = -1;
            cnt--;
            mouse_print_packet(&leitura);

          }


          else if (contadorbytes > 2){
            printf("O contador excedeu 2\n");
            return -1;
          }

          contadorbytes++;
          //fecha o while
        }
        break;
      default:
        break;
      }
    }
    else
    {
      //fica vazio
    }
  }

  sys_inb(OUT_BUF, &lixo);
  
  
  if((mouse_write(WRITE_BYTE_TO_MOUSE))!=0){
    return -1;
  }


  if (mouse_messaging(&arg_report, 0xf5) != 0)
  {
    return -1;
  }
  sys_inb(OUT_BUF, &lixo);
  if ((mouse_unsubscribe_int()) != 0)
  {
    return -1;
  }
  return 0;
}

int(mouse_test_remote)(uint16_t period, uint8_t cnt)
{
  int sinalx, sinaly;
  uint8_t bit_no;
  uint16_t mousebyte16bits;
  struct packet leitura;
  uint8_t arg_report = INITIALIZE0,readata[3];

  if (mouse_subscribe_int(&bit_no) != 0)
    return 1;


  while (cnt > 0)
  {

    if (mouse_messaging(&arg_report, 0xeb) != 0)
    {
      printf("erro no mouse_messaging quando tentavamos mandar 0xf4");
      return -1;
    }

    if(arg_report==0xfe){
      return -1;
    }


    if((keyboard_command_receive(&readata[0]))!=0){
      return -1;
    }

    if((keyboard_command_receive(&readata[1]))!=0){
      return -1;
    }

    if((keyboard_command_receive(&readata[2]))!=0){
      return -1;
    }

      //testar a sincronizacao

        if ((readata[0] & BIT(3)) != 0)
        {
          leitura.bytes[0] = readata[0];
        }
        else
          continue;

        leitura.bytes[1] = readata[1];

        leitura.bytes[2] = readata[2];


        if ((leitura.bytes[0] & L_B) != 0)
          leitura.lb = TRUE;
        else
          leitura.lb = FALSE;

        if ((leitura.bytes[0] & M_B) != 0)
          leitura.mb = TRUE;
        else
          leitura.mb = FALSE;

        if ((leitura.bytes[0] & R_B) != 0)
          leitura.rb = TRUE;
        else
          leitura.rb = FALSE;

        if ((leitura.bytes[0] & Y_OVFL) != 0)
          leitura.y_ov = TRUE;
        else
          leitura.y_ov = FALSE;

        if ((leitura.bytes[0] & X_OVFL) != 0)
          leitura.x_ov = TRUE;
        else
          leitura.x_ov = FALSE;

        if ((leitura.bytes[0] & X_SIGN) != 0)
        {
          sinalx = 1;
        }
        else
          sinalx = 0;

        if ((leitura.bytes[0] & Y_SIGN) != 0)
        {
          sinaly = 1;
        }
        else
          sinaly = 0;


          if (sinalx == 1)
          {
            mousebyte16bits = 0;
            mousebyte16bits = (mousebyte16bits|leitura.bytes[1]);
            mousebyte16bits = (mousebyte16bits ^ 0xff) + 0x01;
            leitura.delta_x = mousebyte16bits;
          }
          else
          {
            mousebyte16bits = 0;
            mousebyte16bits = (mousebyte16bits|leitura.bytes[1]);

            leitura.delta_x = mousebyte16bits;
          }

        if (sinaly == 1)
        {
          mousebyte16bits = 0;
          mousebyte16bits = (mousebyte16bits|leitura.bytes[2]);
          mousebyte16bits = (mousebyte16bits ^ 0xff) + 0x01;
          leitura.delta_y = mousebyte16bits;
        }
        else
        {
          mousebyte16bits = 0;
          mousebyte16bits = (mousebyte16bits|leitura.bytes[2]);
          leitura.delta_y = mousebyte16bits;
        }


        cnt=cnt-1;
        mouse_print_packet(&leitura);

      tickdelay(period);
      //fecha o while
    }



    if (mouse_messaging(&arg_report, 0xf5) != 0)
    {
      printf("erro no mouse_messaging quando tentavamos mandar 0xf4");
      return -1;
    }

    if (arg_report == 0xfe)
    {
      if (mouse_messaging(&arg_report, 0xf5) != 0)
      {
        printf("erro no mouse_messaging quando tentavamos mandar 0xf4");
        return -1;
      }
    }
    if (arg_report == 0xfc)
    {
      printf("second consecutive invalid byte");
      return -1;
    }

    if (mouse_messaging(&arg_report, 0xea) != 0)
    {
      return -1;
    }



  minix_get_dflt_kbc_cmd_byte();

  if ((mouse_unsubscribe_int()) != 0)
  {
    return -1;
  }
  return 0;
}

int(mouse_test_async)(uint8_t idle_time)
{

  int ipc_status, r, irq_timer0 = INITIALIZE0, irq_mouse = INITIALIZE0;
  uint8_t bit_no1, bit_no2;
  message msg;
  uint8_t currenttimer = INITIALIZE0;
  extern int globalcounter;
  int contadorbytes = 0, sinalx, sinaly;
  struct packet leitura;
  uint8_t arg_report = INITIALIZE0;
  uint16_t mousebyte16bits;

  if (timer_subscribe_int(&bit_no1) != 0)
    return 1;

  irq_timer0 = BIT(bit_no1);

  if (mouse_subscribe_int(&bit_no2) != 0)
    return 1;

  irq_mouse = BIT(bit_no2);

  if (mouse_messaging(&arg_report, 0xF4) != 0)
  {
    printf("erro no mouse_messaging quando tentavamos mandar 0xf411");
    return -1;
  }

  if (arg_report == 0xfe)
  {
    if (mouse_messaging(&arg_report, 0xf4) != 0)
    {
      printf("erro no mouse_messaging quando tentavamos mandar 0xf4");
      return -1;
    }
  }
  if (arg_report == 0xfc)
  {
    printf("second consecutive invalid byte");
    return -1;
  }

  if (idle_time <= 0)
  {
    printf("ERRO NO TEMPO\n");
    return -1;
  }
  while (currenttimer < idle_time)
  { /* You may want to use a different condition */
    /* Get a request message. */
    if ((r = driver_receive(ANY, &msg, &ipc_status)) != 0)
    {
      printf("driver_receive failed with: %d", r);
      continue;
    }
    if (is_ipc_notify(ipc_status))
    { /* received notification */
      switch (_ENDPOINT_P(msg.m_source))
      {
      case HARDWARE: /* hardware interrupt notification */
        if (msg.m_notify.interrupts & irq_timer0)
        { /* subscribed interrupt */
          timer_int_handler();
          if ((globalcounter % sys_hz()) == 0)
          {
            currenttimer++;
          }
        }
        if (msg.m_notify.interrupts & irq_mouse)
        { /* subscribed interrupt*/ /* process KBD interrupt request */

          mouse_ih();

          //testar a sincronizacao
          if (contadorbytes == 0)
          {
            if ((mousebyte & BIT(3)) != 0)
            {
              leitura.bytes[0] = mousebyte;
            }
            else
              contadorbytes = -1;
          }

          else if (contadorbytes == 1)
          {

            leitura.bytes[1] = mousebyte;
          }

          else if (contadorbytes == 2)
          {
            leitura.bytes[2] = mousebyte;

            if ((leitura.bytes[0] & L_B) != 0)
              leitura.lb = TRUE;
            else
              leitura.lb = FALSE;

            if ((leitura.bytes[0] & M_B) != 0)
              leitura.mb = TRUE;
            else
              leitura.mb = FALSE;

            if ((leitura.bytes[0] & R_B) != 0)
              leitura.rb = TRUE;
            else
              leitura.rb = FALSE;

            if ((leitura.bytes[0] & Y_OVFL) != 0)
              leitura.y_ov = TRUE;
            else
              leitura.y_ov = FALSE;

            if ((leitura.bytes[0] & X_OVFL) != 0)
              leitura.x_ov = TRUE;
            else
              leitura.x_ov = FALSE;

            if ((leitura.bytes[0] & X_SIGN) != 0)
            {
              sinalx = 1;
            }
            else
              sinalx = 0;

            if ((leitura.bytes[0] & Y_SIGN) != 0)
            {
              sinaly = 1;
            }
            else
              sinaly = 0;

            if (sinalx == 1)
            {
              mousebyte16bits = 0;
              mousebyte16bits = (mousebyte16bits | leitura.bytes[1]);
              mousebyte16bits = (mousebyte16bits ^ 0xff) + 0x01;
              leitura.delta_x = mousebyte16bits;
            }
            else
            {
              mousebyte16bits = 0;
              mousebyte16bits = (mousebyte16bits | leitura.bytes[1]);

              leitura.delta_x = mousebyte16bits;
            }

            if (sinaly == 1)
            {
              mousebyte16bits = 0;
              mousebyte16bits = (mousebyte16bits | leitura.bytes[2]);
              mousebyte16bits = (mousebyte16bits ^ 0xff) + 0x01;
              leitura.delta_y = mousebyte16bits;
            }
            else
            {
              mousebyte16bits = 0;
              mousebyte16bits = (mousebyte16bits | leitura.bytes[2]);
              leitura.delta_y = mousebyte16bits;
            }

            contadorbytes = -1;
            mouse_print_packet(&leitura);
            currenttimer = 0;
          }

          else if (contadorbytes > 2)
          {
            printf("O contador excedeu 2\n");
            return -1;
          }

          contadorbytes++;
          //fecha o while
        }

        break;
      default:
        break;
      }
    }
    else
    {
      //fica vazio
    }
  }

  if (mouse_messaging(&arg_report, 0xf5) != 0)
  {
    return -1;
  }
  if (mouse_messaging(&arg_report, 0xf6) != 0)
  {
    return -1;
  }
  if ((mouse_unsubscribe_int()) != 0)
  { //unsubscribe dos interrupts do keyboard
    return -1;
  }
  if ((timer_unsubscribe_int()) != 0)
  { //unsibscribe dos interrupts do timer
    return -1;
  }
  return 0;
}

///int(mouse_test_gesture)()
//{
  /* To be completed */
  //printf("%s: under construction\n", __func__);
  //return 1;
//}
