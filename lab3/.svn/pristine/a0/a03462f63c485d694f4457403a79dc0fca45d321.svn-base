
#include <stdbool.h>
#include <stdint.h>
#include <lcom/lcf.h>
#include <minix/sysutil.h>
#include <stdlib.h>
#include <minix/drivers.h>
#include <stdint.h>
#include <minix/syslib.h>
#include "kbd.h"
#include "i8042.h"
#include "i8254.h"
#include "kbc.h"
#include "lab3.h"

int main(int argc, char *argv[]) {
  // sets the language of LCF messages (can be either EN-US or PT-PT)
  lcf_set_language("EN-US");

  // enables to log function invocations that are being "wrapped" by LCF
  // [comment this out if you don't want/need/ it]
  lcf_trace_calls("/home/lcom/labs/lab3/trace.txt");

  // enables to save the output of printf function calls on a file
  // [comment this out if you don't want/need it]
  lcf_log_output("/home/lcom/labs/lab3/output.txt");

  // handles control over to LCF
  // [LCF handles command line arguments and invokes the right function]
  if (lcf_start(argc, argv))
    return 1;

  // LCF clean up tasks
  // [must be the last statement before return]
  lcf_cleanup();

  return 0;
}

int (kbd_test_scan)(bool (assembly)) {
	/* To be completed */
	/* When you use argument assembly for the first time, delete the UNUSED macro */
  int ipc_status, r, irq_set;
  message msg;
  uint8_t BIT_NO,scancode=0x00;
  
  if(kb_subscribe_int(&BIT_NO)!=0)
    return 1;
    
    irq_set =  BIT(BIT_NO);
  
  while(scancode!=ESC_BREAK) { /* You may want to use a
     /* Get a request message. */
     if ( (r = driver_receive(ANY, &msg, &ipc_status)) != 0 ) { 
         printf("driver_receive failed with: %d", r);
        continue;
    }
    if (is_ipc_notify(ipc_status)) { 
        switch (_ENDPOINT_P(msg.m_source)) {
            case HARDWARE:                                 
                
                if (msg.m_notify.interrupts & irq_set) { 
                        scancode=keyboard_handler(assembly);
                
                }
                break;
            default:
                break;      
        }
    }else { 
    }
 }

return 0;
}
  // escolher que IH baseado na linguagem


 /* if( se receber scan code 0x81)
    return 0;
*/
}
int (kbd_test_poll)() {
    /* To be completed */
}
int (kbd_test_timed_scan)(uint8_t UNUSED(n)) {
    /* To be completed */
    /* When you use argument n for the first time, delete the UNUSED macro */
}
