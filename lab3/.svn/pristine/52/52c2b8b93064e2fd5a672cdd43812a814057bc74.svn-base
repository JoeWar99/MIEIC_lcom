#include <lcom/lcf.h>
#include <minix/syslib.h>
#include <stdint.h>
#include <minix/drivers.h>
#include <stdbool.h>
#include <minix/sysutil.h>

#include "i8042.h"
#include "i8254.h"
#include "kbc.h"
#include "kbd.h"
#include "lab3.h"
#include "kbc.h"



static int hook_id; // hookid utilizado para a funçao irq_setpolicy()


uint8_t (keyboard_handler)(bool (assembly)) {
  // ler o scan code, definir se é make or break code
  uint8_t scancode=0x00,regscan=0x00,scancode2bytes=0x00,size=1, bytes[10];
  bool make;
  if(assembly==FALSE){
    if(keyboard_OBF_read(&scancode)!=0){
      return 1;
    }
    bytes[0]=scancode;

    if(scancode==0xe0){
      size++;
      
      if(keyboard_OBF_read(&scancode2bytes)!=0){
        return 1;
      }
      bytes[1]=scancode2bytes;
      bytes[0]=scancode;
    } 
  
  }else{
    return 1;
  }

  if((scancode&0x80)!=0x00){
    make=FALSE;
  }else{
    make=TRUE;
  }

  kbd_print_scancode(make,size,bytes);

  return scancode;
}

int (kb_subscribe_int)(uint8_t *bit_no) {

  if(bit_no == NULL) {//erro caso a apontador bit no não seja valido
    return 1;
  }
  hook_id = 1;
  *bit_no = hook_id; // bit no recebe o hook id que nos configuramos para mandarmos para o kernel
  if(sys_irqsetpolicy(IRQ_LINE_KEYBOARD,IRQ_REENABLE || IRQ_EXCLUSIVE,&hook_id)!=OK){//da set a policy
      return 1;
  }
    if(sys_irqenable(&hook_id)!=OK){
      return 1;
    }

  return 0;
  // sys_irqsetpolicy ja da enable nos interrupts dai nao se utilizar a funcao enable para dar enable no interrupts
}

int (keyboard_unsubscribe_int)() {
    
  if(sys_irqdisable(&hook_id)!=OK){//disable primeiro, para depois tirar a policy set
    return 1;
  }
  if(sys_irqrmpolicy(&hook_id)!=OK){//disbable nos interrupts
    return 1;
  }
  return 0;
}