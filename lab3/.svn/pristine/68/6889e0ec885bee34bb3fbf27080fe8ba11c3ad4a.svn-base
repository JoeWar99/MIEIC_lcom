#include <lcom/lcf.h>
#include <lcom/lab3.h>
#include <minix/drivers.h>
#include <minix/syslib.h>
#include <minix/sysutil.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>
#include <stdint.h>

#include "kbd.h"
#include "i8042.h"
#include "kbc.h"

static int hook_id=0x01; // hookid utilizado para a funçao irq_setpolicy()

int scancode=0x00;

// uint8_t scancode=0x00;
int returnhandler= 0; // valor de retorno da funcao handler


int (kb_subscribe_int)(uint8_t *bit_no) {

  if(bit_no == NULL) {//erro caso a apontador bit no não seja valido
    return -1;
  }

  *bit_no = hook_id; // bit no recebe o hook id que nos configuramos para mandarmos para o kernel

  if(sys_irqsetpolicy(IRQ_LINE_KEYBOARD,IRQ_REENABLE | IRQ_EXCLUSIVE,&hook_id)!=OK){//da set a policy
    return -1;
  }

  return 0;
  //check
}

int (keyboard_unsubscribe_int)() {

  if(sys_irqdisable(&hook_id)!=OK){//disable primeiro, para depois tirar a policy set
    return -1;
  }
  if(sys_irqrmpolicy(&hook_id)!=OK){//disbable nos interrupts
    return -1;
  }
  return 0;
  //check
}


int(keyboard_handler_IN_C)(){
  /*uint32_t scancode32bit= 0x00;
  sys_inb_cnt(OUT_BUF, &scancode32bit);
  scancode = (uint8_t)(scancode32bit & 0xFF);*/ //INTERRUPT HANDLER MUITO SIMPLES NAO CONSEGUE VER SE O BUFFER ESTA CHEIO OU NAO
  uint32_t statusregister= 0x00;
  uint32_t scancode32bit=0x00, scancode8bit=0x00;
  while (1) {
		sys_inb(STAT_REG, &statusregister); /* assuming it returns OK */
		/* loop while 8042 output buffer is empty */
 
		if (statusregister & OBF) { 
     
			sys_inb(OUT_BUF, &scancode32bit); /* assuming it returns OK */
   
      scancode8bit = (uint8_t)(scancode32bit & 0xFF);
     
			if ((statusregister & (PAR_ERR | TO_ERR)) == 0){
        scancode = scancode8bit;
        return 0;
      }
			else
				return -1;
		}
    tickdelay(micros_to_ticks(DELAY_US));
  }
}

//void(keyboard_handler_IN_ASSEMBLY){


//}

  // ler o scan code, definir se é make or break code
